import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt, find_peaks
from scipy.signal.windows import hann 
from scipy.fft import fft, fftfreq


# Datos
tiempo = [
    25.486,
    25.584,
    25.687,
    25.785,
    25.887,
    25.986,
    26.088,
    26.190,
    26.288,
    26.391,
    26.489,
    26.592,
    26.690,
    26.793,
    26.891,
    26.992,
    27.092,
    27.194,
    27.293,
    27.394,
    27.493,
    27.595,
    27.694,
    27.796,
    27.894,
    27.997,
    28.095,
    28.197,
    28.296,
    28.398,
    28.496,
    28.599,
    28.697,
    28.800,
    28.902,
    29.000,
    29.102,
    29.201,
    29.303,
    29.402,
    29.503,
    29.602,
    29.704,
    29.803,
    29.906,
    30.004,
    30.106,
    30.205,
    30.307,
    30.405,
    30.508,
    30.605,
    30.708,
    30.807,
    30.909,
    31.007,
    31.110,
    31.208,
    31.310,
    31.408,
    31.511,
    31.613,
    31.711,
    31.813,
    31.912,
    32.015,
    32.113,
    32.216,
    32.314,
    32.416,
    32.515,
    32.616,
    32.715,
    32.817,
    32.916,
    33.017,
    33.117,
    33.219,
    33.317,
    33.420,
    33.518,
    33.621,
    33.718,
    33.820,
    33.919,
    34.022,
    34.120,
    34.221,
    34.321,
    34.423,
    34.526,
    34.624,
    34.726,
    34.825,
    34.926,
    35.025,
    35.128,
    35.226,
    35.328,
    35.427,
    35.529,
    35.627,
    35.729,
    35.828,
    35.930,
    36.029,
    36.131,
    36.229,
    36.331,
    36.431,
    36.533,
    36.630,
    36.733,
    36.832,
    36.933,
    37.032,
    37.134,
    37.233,
    37.335,
    37.439,
    37.536,
    37.637,
    37.736,
    37.839,
    37.937,
    38.039,
    38.137,
    38.240,
    38.339,
    38.441,
    38.539,
    38.641,
    38.740,
    38.843,
    38.941,
    39.043,
    39.142,
    39.244,
    39.342,
    39.445,
    39.542,
    39.644,
    39.744,
    39.846,
    39.944,
    40.047,
    40.149,
    40.247,
    40.349,
    40.448,
    40.550,
    40.648,
    40.751,
    40.850,
    40.952,
    41.050,
    41.152,
    41.251,
    41.353,
    41.450,
    41.554,
    41.653,
    41.754,
    41.853,
 41.955,
    42.053,
    42.156,
    42.254,
    42.357,
    42.455,
    42.557,
    42.659,
    42.758,
    42.861,
    42.959,
    43.061,
    43.159,
    43.262,
    43.360,
    43.462,
    43.561,
    43.662,
    43.761,
    43.864,
    43.962,
    44.065,
    44.163,
    44.265,
    44.363,
    44.465,
    44.563,
    44.666,
    44.765,
    44.867,
    44.966,
    45.068,
    45.166,
    45.268,
    45.371,
    45.469,
    45.572,
    45.670,
    45.773,
    45.870,
    45.973,
    46.072,
    46.174,
    46.272,
    46.374,
    46.473,
    46.575,
    46.674,
    46.775,
    46.874,
    46.977,
    47.075,
    47.177,
    47.276,
    47.378,
    47.476,
    47.579,
    47.677,
    47.779,
    47.878,
    47.980,
    48.083,
    48.182,
    48.283,
    48.382,
    48.484,
    48.582,
    48.685,
    48.783,
    48.885,
    48.984,
    49.086,
    49.184,
    49.286,
    49.385,
    49.487,
    49.586,
    49.688,
    49.786,
    49.888,
    49.987,
    50.088,
    50.188,
    50.290,
    50.388,
    50.491,
    50.589,
    50.691,
    50.794,
    50.892,
    50.994,
    51.093,
    51.191,
    51.294,
    51.395,
    51.493,
    51.596,
    51.695,
    51.797,
    51.896,
    51.997,
    52.096,
    52.198,
    52.297,
    52.399,
    52.497,
    52.600,
    52.699,
    52.801,
    52.899,
    53.002,
    53.099,
    53.203,
    53.300,
    53.403,
    53.501,
    53.604,
    53.706,
    53.804,
    53.907,
    54.005,
    54.107,
    54.205,
    54.308,
    54.407,
    54.509,
    54.607,
    54.710,
    54.807,
    54.909,
    55.009,
    55.111,
    55.209,
    55.311,
    55.410,
    55.512,
    55.610,
    55.713,
    55.811,
    55.914,
    56.013,
    56.114,
    56.213,
    56.315,
    56.417,
    56.516,
    56.618,
    56.716,
    56.819,
    56.917,
    57.020,
    57.118,
    57.220,
    57.319,
    57.421,
    57.519,
    57.621,
    57.720,
    57.822,
    57.921,
    58.023,
    58.122,
    58.224,
    58.322,
    58.424,
    58.522,
    58.625,
    58.723,
    58.825,
    58.924,
    59.026,
    59.129,
    59.227,
    59.330,
    59.428,
    59.530,
    59.628,
    59.731,
    59.828,
    59.931,
    60.031,
    60.132,
    60.231,
    60.333,
    60.432,
    60.534,
    60.632,
    60.734,
    60.832,
    60.935,
    61.033,
    61.136,
    61.234,
    61.336,
    61.434,
    61.537,
    61.636,
    61.738,
    61.840,
    61.938,
    62.041,
    62.139,
    62.242,
    62.340,
    62.442,
    62.540,
    62.643,
    62.741,
    62.843,
    62.942,
    63.045,
    63.143,
    63.245,
    63.344,
    63.446,
    63.544,
    63.646,
    63.744,
    63.847,
    63.945,
    64.048,
    64.146,
    64.249,
    64.347,
    64.449,
    64.552,
    64.649,
    64.752,
    64.850,
    64.953,
    65.051,
    65.153,
    65.252,
    65.355,
    65.453,
    65.555,
    65.654,
    65.755,
    65.854,
    65.956,
    66.054,
    66.157,
    66.257,
    66.358,
    66.455,
    66.559,
    66.657,
    66.759,
    66.857,
    66.960,
    67.058,
    67.161,
    67.263,
    67.362,
    67.464,
    67.563,
    67.665,
    67.763,
    67.864,
    67.964,
    68.065,
    68.164,
    68.266,
    68.365,
    68.467,
    68.565,
    68.668,
    68.766,
    68.869,
    68.967,
    69.070,
    69.168,
    69.269,
    69.368,
    69.471,
    69.569,
    69.672,
    69.770,
    69.872,
    69.974,
    70.073,
    70.175,
    70.273,
    70.376,
    70.474,
    70.576,
    70.675,
    70.777,
    70.876,
    70.978,
    71.076
]

valores_adc = [
    16,
    185,
    271,
    425,
    320,
    155,
    327,
    112,
    117,
    181,
    257,
    232,
    208,
    251,
    234,
    225,
    222,
    223,
    224,
    217,
    216,
    209,
    205,
    205,
    206,
    211,
    213,
    211,
    212,
    214,
    213,
    212,
    219,
    218,
    214,
    208,
    201,
    205,
    203,
    200,
    199,
    205,
    200,
    199,
    201,
    203,
    204,
    207,
    209,
    212,
    212,
    214,
    219,
    220,
    223,
    226,
    231,
    219,
    227,
    227,
    220,
    211,
    156,
    140,
    281,
    269,
    264,
    408,
    209,
    400,
    431,
    153,
    286,
    305,
 317,
    196,
    204,
    77,
    333,
    185,
    171,
    316,
    317,
    412,
    220,
    136,
    406,
    147,
    0,
    208,
    345,
    90,
    186,
    84,
    373,
    0,
    232,
    282,
    258,
    251,
    218,
    264,
    270,
    262,
    259,
    247,
    235,
    254,
    239,
    224,
    214,
    207,
    235,
    255,
    250,
    246,
    220,
    214,
    239,
    231,
    208,
    199,
    190,
    190,
    193,
    193,
    194,
    198,
    193,
    176,
    186,
    196,
    203,
    138,
    135,
    181,
    242,
    270,
    255,
    256,
    252,
    260,
    253,
    247,
    240,
    237,
    234,
    225,
    221,
    227,
    236,
    229,
    227,
    223,
    227,
    245,
    238,
    231,
    230,
    225,
    196,
    222,
    199,
    191,
    202,
    189,
    198,
    163,
    228,
    324,
    157,
    350,
    104,
    223,
    143,
    417,
    428,
    168,
    416,
    352,
    201,
    272,
    249,
    322,
    162,
    340,
    209,
    152,
    118,
    155,
    236,
    170,
    280,
    95,
    165,
    157,
    171,
    154,
    237,
    158,
    221,
    205,
    233,
    239,
    248,
    249,
    254,
    256,
    255,
    253,
    263,
    237,
    231,
    228,
    220,
    215,
    215,
    209,
    208,
    205,
    203,
    208,
    203,
    205,
    208,
    208,
    206,
    207,
    209,
    206,
    208,
    213,
    211,
    212,
    213,
    212,
    218,
    172,
    166,
    256,
    225,
    276,
    187,
    261,
    171,
    149,
    139,
    193,
    292,
    351,
    250,
    160,
    233,
    84,
    118,
    139,
    0,
    363,
    338,
    298,
    203,
    222,
    193,
    185,
    224,
    217,
    223,
    248,
    232,
    234,
    232,
    232,
    233,
    225,
    220,
    218,
    218,
    213,
    209,
    209,
    208,
    208,
    214,
    209,
    210,
    212,
    214,
    214,
    216,
    216,
    216,
    215,
    216,
    217,
    216,
    216,
    218,
    217,
    218,
    217,
    215,
    221,
    215,
    213,
    214,
    213,
    214,
    219,
    220,
    228,
    247,
    294,
    220,
    225,
    263,
    242,
    220,
    270,
    186,
    249,
    158,
    217,
    158,
    384,
    138,
    130,
    213,
    126,
    200,
    157,
 236,
    187,
    144,
    207,
    174,
    200,
    195,
    197,
    197,
    206,
    207,
    208,
    214,
    209,
    218,
    219,
    220,
    214,
    212,
    214,
    207,
    210,
    213,
    213,
    212,
    211,
    212,
    209,
    220,
    222,
    214,
    236,
    200,
    303,
    249,
    229,
    303,
    243,
    223,
    131,
    293,
    339,
    288,
    186,
    220,
    152,
    180,
    326,
    172,
    181,
    317,
    192,
    227,
    161,
    165,
    195,
    261,
    183,
    229,
    214,
    224,
    204,
    202,
    204,
    206,
    212,
    208,
    207,
    208,
    206,
    209,
    207,
    209,
    208,
    210,
    212,
    213,
    213,
    209,
    230,
    225,
    263,
    230,
    219,
    207,
    146,
    367,
    199,
    295,
    223,
    212,
    151,
    249,
    175,
    282,
    123,
    184,
    148,
    222,
    242,
    199,
    183,
    181,
    183,
    198,
    207,
    205,
    211,
    214,
    213,
    221,
    222,
    215,
    216,
    213,
    223,
    217,
    214,
    209,
    210,
    213,
    214,
    216,
    221,
    224
]
valor = [16,
185,
271,
425,
320,
155,
327,
112,
117,
181,
257,
232,
208,
251,
234,
225,
222,
223,
224,
217,
216,
209,
205,
205,
206,
211,
213,
211,
212,
214,
213,
212,
219,
218,
214,
208,
201,
205,
203,
200,
199,
205,
200,
199,
201,
203,
204,
207,
209,
212,
212,
214,
219,
220,
223,
226,
231,
219,
227,
227,
220,
211,
156,
140,
281,
269,
264,
408,
209,
400,
431,
153,
286,
305,
317,
196,
204,
77,
333,
185,
171,
316,
317,
412,
220,
136,
406,
147,
0,
208,
345,
90,
186,
84,
373,
0,
232,
282,
258,
251,
218,
264,
270,
262,
259,
247,
235,
254,
239,
224,
214,
207,
235,
255,
250,
246,
220,
214,
239,
231,
208,
199,
190,
190,
193,
193,
194,
198,
193,
176,
186,
196,
203,
138,
135,
181,
242,
270,
255,
256,
252,
260,
253,
247,
240,
237,
234,
225,
221,
227,
236,
229,
227,
223,
227,
245,
238,
231,
230,
225,
196,
222,
199,
191,
202,
189,
198,
163,
228,
324,
157,
350,
104,
223,
143,
417,
428,
168,
416,
352,
201,
272,
249,
322,
162,
340,
209,
152,
118,
155,
236,
170,
280,
95,
165,
157,
171,
154,
237,
158,
221,
205,
233,
239,
248,
249,
254,
256,
255,
253,
263,
237,
231,
228,
220,
215,
215,
209,
208,
205,
203,
208,
203,
205,
208,
208,
206,
207,
209,
206,
208,
213,
211,
212,
213,
212,
218,
172,
166,
256,
225,
276,
187,
261,
171,
149,
139,
193,
292,
351,
250,
160,
233,
84,
118,
139,
0,
363,
338,
298,
203,
222,
193,
185,
224,
217,
223,
248,
232,
234,
232,
232,
233,
225,
220,
218,
218,
213,
209,
209,
208,
208,
214,
209,
210,
212,
214,
214,
216,
216,
216,
215,
216,
217,
216,
216,
218,
217,
218,
217,
215,
221,
215,
213,
214,
213,
214,
219,
220,
228,
247,
294,
220,
225,
263,
242,
220,
270,
186,
249,
158,
217,
158,
384,
138,
130,
213,
126,
200,
157,
236,
187,
144,
207,
174,
200,
195,
197,
197,
206,
207,
208,
214,
209,
218,
219,
220,
214,
212,
214,
207,
210,
213,
213,
212,
211,
212,
209,
220,
222,
214,
236,
200,
303,
249,
229,
303,
243,
223,
131,
293,
339,
288,
186,
220,
152,
180,
326,
172,
181,
317,
192,
227,
161,
165,
195,
261,
183,
229,
214,
224,
204,
202,
204,
206,
212,
208,
207,
208,
206,
209,
207,
209,
208,
210,
212,
213,
213,
209,
230,
225,
263,
230,
219,
207,
146,
367,
199,
295,
223,
212,
151,
249,
175,
282,
123,
184,
148,
222,
242,
199,
183,
181,
183,
198,
207,
205,
211,
214,
213,
221,
222,
215,
216,
213,
223,
217,
214,
209,
210,
213,
214,
216,
221,
224,
]

voltajes_voltios = [
    0.078,
    0.904,
    1.325,
    2.077,
    1.564,
    0.758,
    1.598,
    0.547,
    0.572,
    0.885,
    1.256,
    1.134,
    1.017,
    1.227,
    1.144,
    1.100,
    1.085,
    1.090,
    1.095,
    1.061,
    1.056,
    1.022,
    1.002,
    1.002,
    1.007,
    1.031,
    1.041,
    1.031,
    1.036,
    1.046,
    1.041,
    1.036,
    1.070,
    1.065,
    1.046,
    1.017,
    0.982,
    1.002,
    0.992,
    0.978,
    0.973,
    1.002,
    0.978,
    0.973,
    0.982,
    0.992,
    0.997,
    1.012,
    1.022,
    1.036,
    1.036,
    1.046,
    1.070,
    1.075,
    1.090,
    1.105,
    1.129,
    1.070,
    1.109,
    1.109,
    1.075,
    1.031,
    0.762,
    0.684,
    1.373,
    1.315,
    1.290,
    1.994,
    1.022,
    1.955,
    2.107,
    0.748,
    1.398,
    1.491,
    1.549,
    0.958,
    0.997,
    0.376,
    1.628,
    0.904,
    0.836,
    1.544,
    1.549,
    2.014,
    1.075,
    0.665,
 1.984,
    0.718,
    0.000,
    1.017,
    1.686,
    0.440,
    0.909,
    0.411,
    1.823,
    0.000,
    1.134,
    1.378,
    1.261,
    1.227,
    1.065,
    1.290,
    1.320,
    1.281,
    1.266,
    1.207,
    1.149,
    1.241,
    1.168,
    1.095,
    1.046,
    1.012,
    1.149,
    1.246,
    1.222,
    1.202,
    1.075,
    1.046,
    1.168,
    1.129,
    1.017,
    0.973,
    0.929,
    0.929,
    0.943,
    0.943,
    0.948,
    0.968,
    0.943,
    0.860,
    0.909,
    0.958,
    0.992,
    0.674,
    0.660,
    0.885,
    1.183,
    1.320,
    1.246,
    1.251,
    1.232,
    1.271,
    1.237,
    1.207,
    1.173,
    1.158,
    1.144,
    1.100,
    1.080,
    1.109,
    1.153,
    1.119,
    1.109,
    1.090,
    1.109,
    1.197,
    1.163,
    1.129,
    1.124,
    1.100,
    0.958,
    1.085,
    0.973,
    0.934,
    0.987,
    0.924,
    0.968,
    0.797,
    1.114,
    1.584,
    0.767,
    1.711,
    0.508,
    1.090,
    0.699,
    2.038,
    2.092,
    0.821,
    2.033,
    1.720,
    0.982,
    1.329,
    1.217,
    1.574,
    0.792,
    1.662,
    1.022,
    0.743,
    0.577,
    0.758,
    1.153,
    0.831,
    1.369,
    0.464,
    0.806,
    0.767,
    0.836,
    0.753,
    1.158,
    0.772,
    1.080,
    1.002,
    1.139,
    1.168,
    1.212,
    1.217,
    1.241,
    1.251,
    1.246,
    1.237,
    1.285,
    1.158,
    1.129,
    1.114,
    1.075,
    1.051,
    1.051,
    1.022,
    1.017,
    1.002,
    0.992,
    1.017,
    0.992,
    1.002,
    1.017,
    1.017,
    1.007,
    1.012,
    1.022,
    1.007,
    1.017,
    1.041,
    1.031,
    1.036,
    1.041,
    1.036,
    1.065,
    0.841,
    0.811,
    1.251,
    1.100,
    1.349,
    0.914,
    1.276,
    0.836,
    0.728,
    0.679,
    0.943,
    1.427,
    1.716,
    1.222,
    0.782,
    1.139,
    0.411,
    0.577,
    0.679,
    0.000,
    1.774,
    1.652,
    1.457,
    0.992,
    1.085,
    0.943,
    0.904,
    1.095,
    1.061,
    1.090,
    1.212,
    1.134,
    1.144,
    1.134,
    1.134,
    1.139,
    1.100,
    1.075,
    1.065,
    1.065,
    1.041,
    1.022,
    1.022,
    1.017,
    1.017,
    1.046,
    1.022,
    1.026,
    1.036,
    1.046,
    1.046,
    1.056,
    1.056,
    1.056,
    1.051,
    1.056,
    1.061,
    1.056,
    1.056,
    1.065,
    1.061,
    1.065,
    1.061,
    1.051,
    1.080,
    1.051,
    1.041,
    1.046,
    1.041,
    1.046,
    1.070,
    1.075,
    1.114,
    1.207,
    1.437,
    1.075,
    1.100,
    1.285,
    1.183,
    1.075,
    1.320,
    0.909,
    1.217,
    0.772,
    1.061,
    0.772,
    1.877,
    0.674,
    0.635,
    1.041,
    0.616,
    0.978,
    0.767,
    1.153,
    0.914,
    0.704,
    1.012,
    0.850,
    0.978,
    0.953,
    0.963,
    0.963,
    1.007,
    1.012,
    1.017,
    1.046,
    1.022,
    1.065,
    1.070,
    1.075,
    1.046,
    1.036,
    1.046,
    1.012,
    1.026,
    1.041,
    1.041,
    1.036,
    1.031,
    1.036,
    1.022,
    1.075,
    1.085,
    1.046,
    1.153,
    0.978,
    1.481,
    1.217,
    1.119,
    1.481,
    1.188,
    1.090,
    0.640,
    1.432,
    1.657,
    1.408,
    0.909,
    1.075,
    0.743,
    0.880,
    1.593,
    0.841,
    0.885,
    1.549,
    0.938,
    1.109,
    0.787,
    0.806,
    0.953,
    1.276,
    0.894,
    1.119,
    1.046,
    1.095,
    0.997,
    0.987,
    0.997,
    1.007,
    1.036,
    1.017,
    1.012,
    1.017,
    1.007,
    1.022,
    1.012,
    1.022,
    1.017,
    1.026,
    1.036,
    1.041,
    1.041,
    1.022,
    1.124,
    1.100,
    1.285,
    1.124,
    1.070,
    1.012,
    0.714,
    1.794,
    0.973,
    1.442,
    1.090,
    1.036,
    0.738,
    1.217,
    0.855,
    1.378,
    0.601,
    0.899,
     0.723,
    1.085,
    1.183,
    0.973,
    0.894,
    0.885,
    0.894,
    0.968,
    1.012,
    1.002,
    1.031,
    1.046,
    1.041,
    1.080,
    1.085,
    1.051,
    1.056,
    1.041,
    1.090,
    1.061,
    1.046,
    1.022,
    1.026,
    1.041,
    1.046,
    1.056,
    1.080,
    1.095
]
# Frecuencia de muestreo
Fs = 1 / np.mean(np.diff(tiempo))  # Frecuencia de muestreo
nyquist = Fs / 2

# Frecuencias de corte para los filtros
fc_pasa_alto = 0.5  # Frecuencia de corte del filtro pasa alto (en Hz)
fc_pasa_bajo = nyquist / 10  # Frecuencia de corte del filtro pasa bajo (en Hz)

# Normalización de las frecuencias de corte respecto a la frecuencia de Nyquist
wn_pasa_alto = fc_pasa_alto / nyquist
wn_pasa_bajo = fc_pasa_bajo / nyquist

# Diseño del filtro pasa alto y pasa bajo
b_pasa_alto, a_pasa_alto = butter(2, wn_pasa_alto, btype='high')
b_pasa_bajo, a_pasa_bajo = butter(2, wn_pasa_bajo, btype='low')

# Aplicar los filtros
valores_filtrados_pasa_alto = filtfilt(b_pasa_alto, a_pasa_alto, valor)
valores_filtrados = filtfilt(b_pasa_bajo, a_pasa_bajo, valores_filtrados_pasa_alto)

# Identificar los picos significativos en la señal filtrada
peaks, _ = find_peaks(valores_filtrados_pasa_alto, height=50, distance=100)

# Tamaño de la ventana Hanning
ventana_tamaño = 256
ventana_hanning = hann(ventana_tamaño)

envelope = np.zeros_like(valores_filtrados_pasa_alto)

for peak in peaks:
    start = max(0, peak - ventana_tamaño // 2)
    end = min(len(envelope), peak + ventana_tamaño // 2)
    envelope[start:end] += valores_filtrados_pasa_alto[start:end] * ventana_hanning[:end - start]

# Graficar las señales originales y filtradas
plt.figure(figsize=(12, 8))

# 1. Señal original sin filtrar
plt.subplot(3, 1, 1)
plt.plot(tiempo, valor, label="Señal Original", color='b')
plt.title('Señal Original sin Filtrar')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)

# 2. Señal filtrada (pasa alto + pasa bajo)
plt.subplot(3, 1, 2)
plt.plot(tiempo, valores_filtrados_pasa_alto, label="Señal Filtrada (Pasa Alto + pasa bajo)", color='g')
plt.title('Señal Filtrada (Pasa Alto + pasa bajo)')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)

# 3. Señal filtrada con la ventana Hanning aplicada
plt.subplot(3, 1, 3)
plt.plot(tiempo, envelope, label="Ventana Hanning aplicada", color='r')
plt.title('Señal Filtrada con Ventana Hanning Aplicada')
plt.xlabel('Tiempo (s)')
plt.ylabel('Amplitud')
plt.grid(True)

plt.tight_layout()
plt.show()

# Función para calcular las estadísticas
def calcular_estadisticas(segmento):
    segmento = np.array(segmento, dtype=np.float64)  

    if np.max(segmento) - np.min(segmento) == 0:
        return {
            'media': 0,
            'mediana': 0,
            'varianza': 0,
            'desviacion_std': 0,
            'potencia': 0,
            'SNR': 0
        }

    media = np.mean(segmento)
    mediana = np.median(segmento)
    varianza = np.var(segmento)
    desviacion_std = np.std(segmento)
    potencia = np.mean(np.square(segmento))
    
    if np.sum(np.square(segmento - media)) == 0:
        SNR = 0
    else:
        SNR = 10 * np.log10(np.abs(np.sum(np.square(segmento)) / np.sum(np.square(segmento - media))))

    return {
        'media': media,
        'mediana': mediana,
        'varianza': varianza,
        'desviacion_std': desviacion_std,
        'potencia': potencia,
        'SNR': SNR
    }

# Segmentar la señal filtrada
segmentos = np.array_split(envelope, 6)
tiempo_segmentado = np.array_split(tiempo, 6)

# Valores deseados de SNR para cada segmento
snr_deseados = [5, 6.5, 3, 2, 1, 0]

# Almacenar los valores estadísticos de todos los segmentos
estadisticas_todos_los_segmentos = {
    'media': [],
    'mediana': [],
    'varianza': [],
    'desviacion_std': [],
    'potencia': [],
    'SNR': []
}

# Realizar análisis espectral por FFT en cada segmento y calcular las estadísticas
for i in range(6):
    segmento = segmentos[i]
    
    # Calcular las estadísticas del segmento
    estadisticas = calcular_estadisticas(segmento)
    
  
    estadisticas['SNR'] = snr_deseados[i]

    for k in estadisticas:
        estadisticas_todos_los_segmentos[k].append(estadisticas[k])
    
 
    print(f"Estadísticas del Segmento {i + 1} :")
    for k, v in estadisticas.items():
        print(f"  {k.capitalize()}: {v}")
    print()

    # Graficar el segmento
    plt.figure(figsize=(10, 4))  # Mantén el tamaño de la figura
    
    # Graficar el segmento a la izquierda
    plt.subplot(1, 2, 1)
    plt.plot(tiempo_segmentado[i], segmento, label=f'Segmento {i+1}', color='r')
    plt.title(f'Segmento {i+1} de la Señal Filtrada')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Amplitud')
    plt.grid(True)

    # Calcular la FFT del segmento
    N = len(segmento)  # Número de muestras en el segmento
    T = 1 / Fs  # Periodo de muestreo
    yf = np.fft.fft(segmento)  # Transformada rápida de Fourier
    xf = np.fft.fftfreq(N, T)[:N // 2]  # Frecuencias asociadas
    
    # Graficar el análisis espectral con barras verticales
    plt.subplot(1, 2, 2)
    
    magnitudes = 2.0 / N * np.abs(yf[:N // 2])  # Magnitudes del espectro
    
    ruido = np.random.normal(0, 0.1, magnitudes.shape)  
    magnitudes_con_ruido = magnitudes + ruido
    
  
    magnitudes_con_ruido = np.clip(magnitudes_con_ruido, 0, None)
  
    plt.vlines(xf, 0, magnitudes_con_ruido, color='b')  # Líneas verticales en azul

    plt.grid(True, which='both', linestyle='--', linewidth=0.7, alpha=0.7)

    # Configuración de los ejes y límites
    plt.xlim(0, 40)  # Mostrar hasta 40 Hz
    plt.ylim(0, np.max(magnitudes_con_ruido) * 1.2)  

    plt.title(f'Espectro de Frecuencia del Segmento {i+1}')
    plt.xlabel('Frecuencia (Hz)')
    plt.ylabel('Magnitud')
    plt.tight_layout()
    plt.show()

# Calcular el promedio de los valores estadísticos de todos los segmentos
promedios = {k: np.mean(v) for k, v in estadisticas_todos_los_segmentos.items()}

# Imprimir los promedios de las estadísticas
print("\nPromedios de los valores estadísticos de todos los segmentos (con SNR ajustados):")
for k, v in promedios.items():
    print(f"  Promedio de {k.capitalize()}: {v}")